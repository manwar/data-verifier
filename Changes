Revision history for Data::Verifier

0.64  May 02 2023
      - Added support for Bool types, thanks @hernan604.

0.63  Jun 17 2019
      - Handle "meta_yml_has_provides" issue raised by CPANTS.

0.62  Mar 02 2018
      * Doc cleanup, thanks @ronsavage.
        https://github.com/gphat/data-verifier/issues/8
      * Tidied up Changes file.

0.61  Aug 30 2016
      * Merge pull request #14 from Manwar/fix-missing-build-prereqs

0.60  Jul 28 2016
      * Add minimum perl version using dzil plugin [MinimumPerl]. (MANWAR)

0.59  Jul 25 2016
      * Remove un-wanted noises like "no blank line for $VERSION after package". (MANWAR)

0.58  Jul 21 2016
      * Fix pod syntax error as reported by CPANTS. (MANWAR)

0.57  Jul 20 2016
      * Fixed CPAN Tester failed report. (MANWAR)
        http://www.cpantesters.org/cpan/report/51e66eb6-dace-11e3-a014-15d642028010
        http://www.cpantesters.org/cpan/report/fae7cb40-56ad-11e3-b060-7779323a7856

0.56  Apr 6 2013
      * Doc fixes (Ron Savage)

0.55  Mar 29 2013
      * Extend types allowing deep hashref and not only hashref[str] (wreis)

0.54  Jul 5 2012
      * Add Data::Verifier::Nested (Stevan Little)

0.53  Apr 28 2012
      * POD fix (John Anderson)

0.52  Apr 27 2012
      * POD fixes
      * Add derived fields

0.51  Nov 3 2011
      * Fix error prevent proper verification of dependents when using ArrayRef
        types. (bokutin)
      * Document verify method.
      * Allow filters to be ran on undefined or unspecified parameters.

0.49  Jul 9 2011
      * Fix missing Prereqs

0.48  Jul 9 2011
      * Use GPHAT dzil bundle

0.47  Jun 10 2011
      * Moving skip_string_checks down to where it should be, fixing weird bugs
        in repeated use of a verifier profile. (jshirley)

0.46  May 7 2011
      * Allow parameters to be HashRef[Str].  This lets you use nested parameters
        (foo.bar.baz) without.  Filters have also been modified to not assume all
        references are arrays.
      * Add support for parameterized arrays, where each value of an array with
        a type is checked.  See Data::Verifier's POD.

0.45  Feb 23 2011
      * Document merge method

0.44  Feb 23 2011
      * Use Pod::Weaver

0.43  Jan 23 2011
      * Various fixes to the synopses
      * More dzil love

0.42  2011-01-23 09:37:12 America/Chicago
      * Add Git::Commit to make the Changes not be stale
      * Make JSON::XS a dep to get tests passing (Thanks ANDK!)

0.41  2011-01-23 09:28:00 America/Chicago
      * Use Dist::Zilla
      * Fix POD error
      * Add get_values to Results (Jason May)

0.40  Jan 17, 2010
      * Fix typo in POD (Jason May)

0.39  Jan 3, 2010
      * Add JSON::Any to test_requires

0.38
      * Add is_wrong predicate to Results object
      * Document the internals of Results
      * Add a has_field to Results
      * is_missing no longer returns true for arbitrary field names
      * Add many more tests to the default case

0.37
      * Don't dereference ArrayRef values with a single member. (Dennis Sch√∂n,
        RT #60425)

0.36
      * Don't die by attempting to cram a non-arrayref-ref into an array-ref.

0.35
      * Point out that D:V stops processing on the first failure

0.34  Jul 13, 2010
      * Allow the data passed into verify to be an object rather than just a
        HashRef (George Hartzell)

0.33  Jul 9, 2010
      * Match what the documentation says and allow the value of "filters" to be
        a single coderef or an array of coderefs.  (RT #59211, Thanks Ron Savage!)

0.32  June 25, 2010
      * POD fix

0.31  April 9, 2010
      * Add valid_values to Results class

0.30  March 30, 2010
      * Fix accidental warning about the wrong field.  We DO serialize original_value!

0.29  March 10, 2010
      * Add post_filter_value to Field and populate it with the value after
        applying filters.
      * Populate original_value with the value that was submitted, unchanged.
        This is a slightly invasive change but if the field was valid then it will
        re-filter back to the same value so it is considered safe to do.
      * Change type of original_value to ArrayRef|Str to handle multiple
        values of a param.

0.28  February 2, 2010
      * Document that type will allow a TypeConstraint instance and add a test
        so if we break it, we know.
      * Rename all the tests to not include a number, since the order is not
        relevant.

0.27  December 30th, 2009
      * Add flatten filter that removes all whitespace.

0.26
      * Convert to use native Moose traits
      * Pod fixes for RT#52592

0.25
      * Don't run filters on undefined values, lest your logs be spammed
        (thanks to the most awesomest person ever, jshirley.) (ed: ChangeLog
        entry written by jshirley)

0.24
      * Fix typo in unknown type constraint error message.

0.23
      * Use MooseX::Storage::Deferred so that user can choose serialization style.
        (thanks Stevan Little)

0.22
      * Throw an exception when an unknown filter is provided to the filter
        attribute.
      * Allow coderefs to be supplied in the list of filters.
      * Add JSON::Any dependency.
      * Clarify documentation of filters.

0.21
      * Fix type of Field's value attribute (Should've been an Any now that
        it is not serialized.

0.20
      * Improve Field POD
      * Add clear_value to Field and use it rather than value(undef) (which
        validates the type constraint and is just bad form.)
      * Add original_value attribute that holds the value that was submitted for
        the field.
      * Result's value is no longer serialized.

0.10
      * Change post_check's calling convention after reading some wisdom from
        nuffin: http://blog.woobling.org/2009/09/method-style-callbacks.html
      * Change internal API to use a field class rather than a bunch of hashes.

0.09
      * Document check order
      * Clean up post-check test a bit

0.08
      * Remove warning

0.07
      * Add coercion method and attribute for site-specific coercions (stevan and jshirley)

0.06
      * Add post_check key

0.05
      * Add dependent key for creating dependent fields
      * Result
      * Add merge method that adds the supplied result to this one
      * Add is_valid, valid_count and valids
      * Rejigger most is_* methods to return more appropriate values

0.04
      - Properly set coerced values

0.03
      - Set invalid values as undef in Results
      - Add MooseX::Storage to Results can be serialized
      - Add values attribute to Results
      - Only validate defined values against types
      - Enable coercion
      - Add max_length and min_length

0.02
      - Honor global filters

0.01
      - First version, released on an unsuspecting world.
